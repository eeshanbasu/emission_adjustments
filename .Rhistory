df_Jan <- df %>%
filter(df$Time > as.POSIXct("2012-12-31 23:00:00", tz="UTC") & df$Time < as.POSIXct("2013-02-01 00:00:00", tz="UTC"))
df <- as.data.frame(df_Jan)
View(df)
range(df_Jan)
range(df_Jan[-1])
df <- as.data.frame(df_Jan)
View(df_Jan)
df_Jan$Obs <- as.numeric(df_Jan$Obs)
df_Jan$EDGAR <- as.numeric(df_Jan$EDGAR)
df_Jan$Obs <- as.numeric(df_Jan$Obs)
df_Jan$EDGAR <- as.numeric(df_Jan$EDGAR)
df_Jan$FFDAS <- as.numeric(df_Jan$FFDAS)
df_Jan$ODIAC <- as.numeric(df_Jan$ODIAC)
df_Jan$VULCAN <- as.numeric(df_Jan$VULCAN)
range(df_Jan[-1])
df_Jan_temp <- na.omit(df_Jan)
range(df_Jan_temp[-1])
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(df_Jan_temp)
View(df_Jan)
range(df_temp[-1]) + 10
View(df_temp)
dim(df_tenp)
dim(df_temp)
source("~/.active-rstudio-document", echo=TRUE)
site_names
df <- read_excel(target_file,
sheet = "Mt. Bachelor Obs. (MBO), OR",
col_types = c('date','numeric','numeric','numeric','numeric','numeric'))
# reading in data for specific months
df_Jan <- df %>%
filter(df$Time > as.POSIXct("2012-12-31 23:00:00", tz="UTC") & df$Time < as.POSIXct("2013-02-01 00:00:00", tz="UTC"))
df <- as.data.frame(df_Jan)
df_temp <- na.omit(df_Jan)
View(df_temp)
range(df_temp[-1])
View(df_temp)
View(df_Jan_temp)
View(df_Jan)
range(df_temp[-1])
range(df_temp[-1])[1]
range(range(df_temp[-1])[1], range(df_temp[-1])[2])
range(df_temp[-1])[1] + 10
range(range(df_temp[-1])[1] - 20, range(df_temp[-1])[2] + 20)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
dim(df_temp)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
dev.off()
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("E:/Eeshan/evaluation/codes/plots/ts_plot_d03_Vulcan.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(finalDf)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(finalDf)
source("~/.active-rstudio-document", echo=TRUE)
View(finalDf)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_annual.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_annual.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_annual.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_annual.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_january.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_january.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_july.R", echo=TRUE)
source("E:/Eeshan/WRF-Chem_GHG/evaluation_ghg/codes/evaluation_final_july.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(rgdal) # package for geospatial analysis
library(ggplot2) # package for plotting
library(eixport)
library(EmissV)
library(gstat)
library(maps)
files <- dir(paste0('E:/Eeshan/ACOS_satellite/'),
pattern = 'acos_LtCO2_1201',
full.names = T)
source("E:/Eeshan/ACOS_satellite/code/processing.R", echo=TRUE)
View(final_df_test)
plot(df_spatialpoints_total)
plot(df_spatialpoints)
map(add = T)
library(eixport)
?wrf_get
file <- 'E:/Eeshan/variables_ts/Avg.gas.VULCAN.2012-01.nc'
mod <- wrf_get(file = file,
name = "CO2_TST")
plot(mod)
mod
dim(mod)
class(mod)
mod <- wrf_get(file = file,
name = "CO2_TST",
as_raster = T)
plot(mod)
mod
# creating a raster domain to convert the spatial data-points into a raster
ras_dom <- raster(xmn = -2663502,
xmx = 2664498,
ymn = -2016756,
ymx = 2015244,
crs = "+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs",
resolution = c(36000,36000),
vals = NA)
# step to convert the spatial data-points to a raster
r <- rasterize(df_spatialpoints,
ras_dom,
"Mixing_ratio",
update = TRUE)
plot(r)
# checking the satellite data for my domain
df_spatialpoints <- SpatialPointsDataFrame(coords = final_df_test[,1:2],
data = final_df_test,
proj4string = CRS("+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs"))
plot(df_spatialpoints)
# step to convert the spatial data-points to a raster
r <- rasterize(df_spatialpoints,
ras_dom,
"Mixing_ratio",
update = TRUE)
plot(r)
plot(df_spatialpoints)
map(add = T)
# checking the satellite data for my domain
df_spatialpoints <- SpatialPointsDataFrame(coords = final_df_test[,1:2],
data = final_df_test,
proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(df_spatialpoints)
map(add = T)
# creating a raster domain to convert the spatial data-points into a raster
ras_dom <- raster(xmn = -2663502,
xmx = 2664498,
ymn = -2016756,
ymx = 2015244,
crs = "+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs",
resolution = c(36000,36000),
vals = NA)
# step to convert the spatial data-points to a raster
r <- rasterize(df_spatialpoints,
ras_dom,
"Mixing_ratio",
update = TRUE)
plot(r)
View(final_df_test)
# checking the satellite data for my domain
df_spatialpoints <- SpatialPointsDataFrame(coords = final_df_test[,1:2],
data = final_df_test,
proj4string = CRS("+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs"))
plot(df_spatialpoints_total)
plot(df_spatialpoints)
class(df_spatialpoints)
?rasterize
df_spatialpoints
# checking the satellite data for the entire world
df_spatialpoints_total <- SpatialPointsDataFrame(coords = final_df[,1:2],
# checking the satellite data for the entire world
df_spatialpoints_total <- SpatialPointsDataFrame(coords = final_df[,1:2],
data = final_df,
proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
# checking the satellite data for my domain
df_spatialpoints <- SpatialPointsDataFrame(coords = final_df_test[,1:2],
data = final_df_test,
proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(df_spatialpoints)
map(add = T)
axis(1)
axis(2)
class(df_spatialpoints)
library(sp)
# Define the desired projection
new_projection <- CRS("+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs")
spatial_points_lcc <- spTransform(df_spatialpoints, new_projection)
spatial_points_lcc
df_spatialpoints
# creating a raster domain to convert the spatial data-points into a raster
ras_dom <- raster(xmn = -2663502,
xmx = 2664498,
ymn = -2016756,
ymx = 2015244,
crs = "+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs",
resolution = c(36000,36000),
vals = NA)
# step to convert the spatial data-points to a raster
r <- rasterize(spatial_points_lcc,
ras_dom,
"Mixing_ratio",
update = TRUE)
plot(r)
myColorDiff <- colorRampPalette(c("blue","green","yellow","orange","red","purple"))
ncolors <- 200
# value interval for each color
interval <- seq(from = 380,
to = 430,
by = 2.5)
# to plot the raster
plot(r,
col = myColorDiff(ncolors),
interpolate = T,
legend.width=1,
legend.shrink=1,
axes = T)
# to generate a background map
maps::map("usa", add=TRUE, lwd=1, interior = FALSE, col = "grey")
maps::map("state", add=TRUE, lwd=1)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=10,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=100,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
title(expression(ppm),adj = 1,cex = 2)
title(expression(xCO2),adj = 0,cex = 2)
title('GOSAT Jan 2012')
class(nn)
res(nn)
res(mod)
mean(nn)
mean(mod)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=1000,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=50,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
title(expression(ppm),adj = 1,cex = 2)
title(expression(xCO2),adj = 0,cex = 2)
title('GOSAT Jan 2012')
mean(nn)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=25,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
mean(nn)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=30,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
mean(nn)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=10,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
mean(nn)
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=25,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
mean(nn)
mean(nn[], na.rm = TRUE)
mean(mod[], na.rm = TRUE)
min(mod[], na.rm = TRUE)
min(nn[], na.rm = TRUE)
max(nn[], na.rm = TRUE)
max(mod[], na.rm = TRUE)
# Calculate Pearson correlation
correlation <- overlay(mod,
nn,
fun=function(x, y) cor(x, y, use="complete.obs"))
# Calculate Pearson correlation
correlation <- overlay(mod, nn, fun = function(x, y) cor(x, y, use = "complete.obs"))
# Calculate Pearson correlation
correlation <- calc(stack(mod, nn), fun = function(x) cor(x[,1], x[,2], use = "complete.obs"))
dim(mod)
dim(nn)
# Calculate Pearson correlation
correlation <- calc(mod, nn, fun = function(x, y) cor(x, y, use = "complete.obs"))
corr <- corLocal(mod,
nn,
ngb=5,
method = "pearson",
test=TRUE)
class(corr)
plot(corr)
corr_fun <- function(x) cor(x[, 1], x[, 2], use = "complete.obs")
correlation <- calc(raster_stack, fun = corr_fun)
# Create a raster stack with both layers
raster_stack <- stack(mod, nn)
correlation <- calc(raster_stack, fun = corr_fun)
corr_fun <- function(x) cor(x[, 1], x[, 2], use = "complete.obs")
correlation <- calc(raster_stack, fun = corr_fun)
# Extract values from the raster layers
mod_values <- getValues(mod)
nn_values <- getValues(nn)
correlation <- cor(mod_values, nn_values, use = "complete.obs")
print(correlation)
mean_bias <- mean(mod_values - nn_values, na.rm = TRUE)
mean_bias
norm_mean_bias <- mean((nn_values - mod_values) / mod_values, na.rm = TRUE)
norm_mean_bias
norm_mean_error <- mean(abs(nn_values - mod_values) / mod_values, na.rm = TRUE)
norm_mean_error
mod_values
nn_values
E_O_cor <- corLocal(mod,
nn,
ngb=5,
method = "pearson",
test=TRUE)
plot(E_O_cor)
stat(mod,nn)
stats(mod,nn)
library(hackWRF)
stats(mod,nn)
correlation
# creating the formula
gs <- gstat(id = "Mixing_ratio",
formula= Mixing_ratio~1,
locations=spatial_points_lcc,
data=spatial_points_lcc,
nmax=30,
set=list(idp = 0))
nn <- interpolate(ras_dom,
gs)
# to plot the raster
plot(nn,
col = myColorDiff(ncolors),
interpolate = T,
zlim=c(380, 410),
legend.width=1,
legend.shrink=1,
axes = F)
stats(mod,nn)
# converting the monthly model output to raster
mod <- wrf_raster(file = file,
name = "CO2_TST")
class(mod)
stats(mod,nn)
plot(mod)
# checking the satellite data for my domain
df_spatialpoints <- SpatialPointsDataFrame(coords = final_df_test[,1:2],
data = final_df_test,
proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
plot(df_spatialpoints)
map(add = T)
axis(1)
axis(2)
# Define the desired projection
new_projection <- CRS("+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs")
spatial_points_lcc <- spTransform(df_spatialpoints, new_projection)
# creating a raster domain to convert the spatial data-points into a raster
ras_dom <- raster(xmn = -2663502,
xmx = 2664498,
ymn = -2016756,
ymx = 2015244,
crs = "+proj=lcc +lat_0=39.3034400939941 +lon_0=-97.6499938964844 +lat_1=33 +lat_2=45 +x_0=0 +y_0=0 +R=6370000 +units=m +no_defs",
resolution = c(36000,36000),
vals = NA)
# step to convert the spatial data-points to a raster
r <- rasterize(spatial_points_lcc,
ras_dom,
"Mixing_ratio",
update = TRUE)
plot(r)
stats(mod,r)
?sat_evaluation
install.packages(hackWRF)
library(devtools)
install.packages(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages(remotes)
install.packages('remotes')
library(remotes)
install_github('Schuch666/hackWRF')
library(hackWRF)
remotes:::install_github("gearslaboratory/gdalUtils")
install_github('Schuch666/hackWRF')
library(hackWRF)
install.packages('maps')
install_github('Schuch666/hackWRF')
install.packages('maps')
